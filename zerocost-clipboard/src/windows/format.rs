/*! # Clipboard Formats

This module re-exports the [standard clipboard formats](https://docs.microsoft.com/en-us/windows/win32/dataxchg/standard-clipboard-formats).

This module also re-exports the `CLIPBOARD_FORMATS` type from the `windows` crate.
Note that clipboard format codes are essentially simple u32 constants.
Even though this type implements bitwise operations, you must not use them.
It is unclear why Microsoft implemented them (most likely a bug).

## Synthesized Clipboard Formats


Windows automatically adds additional (synthetic) formats to the clipboard as documented [here](https://docs.microsoft.com/en-us/windows/win32/dataxchg/clipboard-formats#synthesized-clipboard-formats).

<div><img src="data:image/svg+xml;base64,
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8
IURPQ1RZUEUgc3ZnIFBVQkxJQyAiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU4iICJodHRwOi8vd3d3
LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQiPg0KPCEtLSBHZW5lcmF0ZWQg
YnkgZ3JhcGh2aXogdmVyc2lvbiAyLjQwLjEgKDIwMTYxMjI1LjAzMDQpCiAtLT4NCjwhLS0gVGl0
bGU6IEcgUGFnZXM6IDEgLS0+DQo8c3ZnIHdpZHRoPSI2NDVwdCIgaGVpZ2h0PSIyNjBwdCIgdmll
d0JveD0iMC4wMCAwLjAwIDY0NC44OCAyNjAuMDAiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8y
MDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiPgo8ZyBp
ZD0iZ3JhcGgwIiBjbGFzcz0iZ3JhcGgiIHRyYW5zZm9ybT0ic2NhbGUoMSAxKSByb3RhdGUoMCkg
dHJhbnNsYXRlKDQgMjU2KSI+Cjx0aXRsZT5HPC90aXRsZT4KPHBvbHlnb24gZmlsbD0iI2ZmZmZm
ZiIgc3Ryb2tlPSJ0cmFuc3BhcmVudCIgcG9pbnRzPSItNCw0IC00LC0yNTYgNjQwLjg4MjYsLTI1
NiA2NDAuODgyNiw0IC00LDQiLz4KPCEtLSBDRl9CSVRNQVAgLS0+CjxnIGlkPSJub2RlMSIgY2xh
c3M9Im5vZGUiPgo8dGl0bGU+Q0ZfQklUTUFQPC90aXRsZT4KPGVsbGlwc2UgZmlsbD0ibm9uZSIg
c3Ryb2tlPSIjMDAwMDAwIiBjeD0iMTEyLjA5OTciIGN5PSItMjM0IiByeD0iNjQuMzAzNiIgcnk9
IjE4Ii8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9IjExMi4wOTk3IiB5PSItMjI5Ljgi
IGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCIgZmlsbD0iIzAwMDAw
MCI+Q0ZfQklUTUFQPC90ZXh0Pgo8L2c+CjwhLS0gQ0ZfRElCIC0tPgo8ZyBpZD0ibm9kZTIiIGNs
YXNzPSJub2RlIj4KPHRpdGxlPkNGX0RJQjwvdGl0bGU+CjxlbGxpcHNlIGZpbGw9Im5vbmUiIHN0
cm9rZT0iIzAwMDAwMCIgY3g9IjEzNy4wOTk3IiBjeT0iLTE2MiIgcng9IjQ0LjEwMDYiIHJ5PSIx
OCIvPgo8dGV4dCB0ZXh0LWFuY2hvcj0ibWlkZGxlIiB4PSIxMzcuMDk5NyIgeT0iLTE1Ny44IiBm
b250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiIGZpbGw9IiMwMDAwMDAi
PkNGX0RJQjwvdGV4dD4KPC9nPgo8IS0tIENGX0JJVE1BUCYjNDU7Jmd0O0NGX0RJQiAtLT4KPGcg
aWQ9ImVkZ2UxIiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT5DRl9CSVRNQVAtJmd0O0NGX0RJQjwvdGl0
bGU+CjxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgZD0iTTExMi40NTU4LC0yMTUu
ODMxNEMxMTQuNTAzNywtMjA3LjYzMjMgMTE3LjcyNTEsLTE5Ny43ODI0IDEyMS4yNTg3LC0xODgu
NzYyNCIvPgo8cG9seWdvbiBmaWxsPSIjMDAwMDAwIiBzdHJva2U9IiMwMDAwMDAiIHBvaW50cz0i
MTI0LjUzNzcsLTE4OS45OTM0IDEyNS4xNzQ4LC0xNzkuNDE3NyAxMTguMDgxNywtMTg3LjI4Nzgg
MTI0LjUzNzcsLTE4OS45OTM0Ii8+CjwvZz4KPCEtLSBDRl9ESUJWNSAtLT4KPGcgaWQ9Im5vZGUz
IiBjbGFzcz0ibm9kZSI+Cjx0aXRsZT5DRl9ESUJWNTwvdGl0bGU+CjxlbGxpcHNlIGZpbGw9Im5v
bmUiIHN0cm9rZT0iIzAwMDAwMCIgY3g9IjU2LjA5OTciIGN5PSItOTAiIHJ4PSI1Ni4xOTk1IiBy
eT0iMTgiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iNTYuMDk5NyIgeT0iLTg1Ljgi
IGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCIgZmlsbD0iIzAwMDAw
MCI+Q0ZfRElCVjU8L3RleHQ+CjwvZz4KPCEtLSBDRl9CSVRNQVAmIzQ1OyZndDtDRl9ESUJWNSAt
LT4KPGcgaWQ9ImVkZ2UyIiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT5DRl9CSVRNQVAtJmd0O0NGX0RJ
QlY1PC90aXRsZT4KPHBhdGggZmlsbD0ibm9uZSIgc3Ryb2tlPSIjMDAwMDAwIiBkPSJNOTQuMDc4
OSwtMjE2LjM3NjdDODcuMjM4NiwtMjA2LjAwMjMgODAuMjM4NiwtMTkyLjUwMjMgNzUuMDk5Nywt
MTgwIDY2Ljc3OSwtMTU5Ljc1NjkgNTkuNTA5NywtMTM2LjA5OTQgNTUuNzQ4LC0xMTguMTIwOSIv
Pgo8cG9seWdvbiBmaWxsPSIjMDAwMDAwIiBzdHJva2U9IiMwMDAwMDAiIHBvaW50cz0iNTkuMTg3
OSwtMTE3LjQ3MzkgNTMuOTU3MSwtMTA4LjI2MDQgNTIuMzAwNiwtMTE4LjcyNDkgNTkuMTg3OSwt
MTE3LjQ3MzkiLz4KPC9nPgo8IS0tIENGX0RJQiYjNDU7Jmd0O0NGX0JJVE1BUCAtLT4KPGcgaWQ9
ImVkZ2UzIiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT5DRl9ESUItJmd0O0NGX0JJVE1BUDwvdGl0bGU+
CjxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgZD0iTTEzNi43NjI0LC0xODAuMDkz
MUMxMzQuNzQwNSwtMTg4LjIwNjYgMTMxLjU2NCwtMTk3Ljk0ODMgMTI4LjA3MDYsLTIwNi45MDUy
Ii8+Cjxwb2x5Z29uIGZpbGw9IiMwMDAwMDAiIHN0cm9rZT0iIzAwMDAwMCIgcG9pbnRzPSIxMjQu
ODEyMiwtMjA1LjYyNTQgMTI0LjE5NTIsLTIxNi4yMDIyIDEzMS4yNzMzLC0yMDguMzE4NyAxMjQu
ODEyMiwtMjA1LjYyNTQiLz4KPC9nPgo8IS0tIENGX0RJQiYjNDU7Jmd0O0NGX0RJQlY1IC0tPgo8
ZyBpZD0iZWRnZTUiIGNsYXNzPSJlZGdlIj4KPHRpdGxlPkNGX0RJQi0mZ3Q7Q0ZfRElCVjU8L3Rp
dGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9IiMwMDAwMDAiIGQ9Ik0xMTMuODQ1NSwtMTQ2
LjM3NzFDMTAyLjMxMzIsLTEzNy4xMDIzIDg4LjU5ODEsLTEyNS4xMzcgNzcuMzUzNCwtMTE0LjYx
NzIiLz4KPHBvbHlnb24gZmlsbD0iIzAwMDAwMCIgc3Ryb2tlPSIjMDAwMDAwIiBwb2ludHM9Ijc5
LjY3MDIsLTExMS45OTAxIDcwLjAyMDQsLTEwNy42MTYxIDc0LjgzNjMsLTExNy4wNTMxIDc5LjY3
MDIsLTExMS45OTAxIi8+CjwvZz4KPCEtLSBDRl9QQUxFVFRFIC0tPgo8ZyBpZD0ibm9kZTQiIGNs
YXNzPSJub2RlIj4KPHRpdGxlPkNGX1BBTEVUVEU8L3RpdGxlPgo8ZWxsaXBzZSBmaWxsPSJub25l
IiBzdHJva2U9IiMwMDAwMDAiIGN4PSI5OC4wOTk3IiBjeT0iLTE4IiByeD0iNjkuNTIwNSIgcnk9
IjE4Ii8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9Ijk4LjA5OTciIHk9Ii0xMy44IiBm
b250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiIGZpbGw9IiMwMDAwMDAi
PkNGX1BBTEVUVEU8L3RleHQ+CjwvZz4KPCEtLSBDRl9ESUImIzQ1OyZndDtDRl9QQUxFVFRFIC0t
Pgo8ZyBpZD0iZWRnZTQiIGNsYXNzPSJlZGdlIj4KPHRpdGxlPkNGX0RJQi0mZ3Q7Q0ZfUEFMRVRU
RTwvdGl0bGU+CjxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgZD0iTTEzNS4wOTMx
LC0xNDMuNzkwNUMxMzIuNzgyNSwtMTI1LjQwODkgMTI4LjM0MzUsLTk2LjMzNjggMTIxLjA5OTcs
LTcyIDExOC40NjcsLTYzLjE1NTIgMTE0LjgxODcsLTUzLjgxMDQgMTExLjIwMjcsLTQ1LjQyNjIi
Lz4KPHBvbHlnb24gZmlsbD0iIzAwMDAwMCIgc3Ryb2tlPSIjMDAwMDAwIiBwb2ludHM9IjExNC4z
MTQ2LC00My44MTEyIDEwNy4wMzU2LC0zNi4xMTI3IDEwNy45MjUsLTQ2LjY3MDIgMTE0LjMxNDYs
LTQzLjgxMTIiLz4KPC9nPgo8IS0tIENGX0RJQlY1JiM0NTsmZ3Q7Q0ZfQklUTUFQIC0tPgo8ZyBp
ZD0iZWRnZTYiIGNsYXNzPSJlZGdlIj4KPHRpdGxlPkNGX0RJQlY1LSZndDtDRl9CSVRNQVA8L3Rp
dGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9IiMwMDAwMDAiIGQ9Ik02Ny40Mjg5LC0xMDcu
OTE2M0M3NC41OTEzLC0xMjYuMzE3NyA4My4wODM3LC0xNTUuNjMyNiA5My4wOTk3LC0xODAgOTYu
NzM1NiwtMTg4Ljg0NTYgMTAxLjMwMzEsLTE5OC4xOTA3IDEwNS4yODk2LC0yMDYuNTc0OCIvPgo8
cG9seWdvbiBmaWxsPSIjMDAwMDAwIiBzdHJva2U9IiMwMDAwMDAiIHBvaW50cz0iMTAyLjIyNzQs
LTIwOC4yOTA4IDEwOS42MTE5LC0yMTUuODg4MiAxMDguNTc2OSwtMjA1LjM0NCAxMDIuMjI3NCwt
MjA4LjI5MDgiLz4KPC9nPgo8IS0tIENGX0RJQlY1JiM0NTsmZ3Q7Q0ZfRElCIC0tPgo8ZyBpZD0i
ZWRnZTciIGNsYXNzPSJlZGdlIj4KPHRpdGxlPkNGX0RJQlY1LSZndDtDRl9ESUI8L3RpdGxlPgo8
cGF0aCBmaWxsPSJub25lIiBzdHJva2U9IiMwMDAwMDAiIGQ9Ik04MC4xNzExLC0xMDYuMjgxN0M5
MS41MzIxLC0xMTUuNDYxNCAxMDQuODcwOSwtMTI3LjExNDkgMTE1Ljg1MjQsLTEzNy4zODg4Ii8+
Cjxwb2x5Z29uIGZpbGw9IiMwMDAwMDAiIHN0cm9rZT0iIzAwMDAwMCIgcG9pbnRzPSIxMTMuNzIx
NywtMTQwLjE5MzcgMTIzLjM3MDEsLTE0NC41NzA4IDExOC41NTcyLC0xMzUuMTMyMiAxMTMuNzIx
NywtMTQwLjE5MzciLz4KPC9nPgo8IS0tIENGX0RJQlY1JiM0NTsmZ3Q7Q0ZfUEFMRVRURSAtLT4K
PGcgaWQ9ImVkZ2U4IiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT5DRl9ESUJWNS0mZ3Q7Q0ZfUEFMRVRU
RTwvdGl0bGU+CjxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgZD0iTTY2LjQ4MTcs
LTcyLjIwMjJDNzEuMzI3OSwtNjMuODk0NCA3Ny4xOTc5LC01My44MzE2IDgyLjU1ODEsLTQ0LjY0
MjciLz4KPHBvbHlnb24gZmlsbD0iIzAwMDAwMCIgc3Ryb2tlPSIjMDAwMDAwIiBwb2ludHM9Ijg1
LjY3NiwtNDYuMjQzOSA4Ny42OTE1LC0zNS44NDI1IDc5LjYyOTUsLTQyLjcxNjggODUuNjc2LC00
Ni4yNDM5Ii8+CjwvZz4KPCEtLSBDRl9FTkhNRVRBRklMRSAtLT4KPGcgaWQ9Im5vZGU1IiBjbGFz
cz0ibm9kZSI+Cjx0aXRsZT5DRl9FTkhNRVRBRklMRTwvdGl0bGU+CjxlbGxpcHNlIGZpbGw9Im5v
bmUiIHN0cm9rZT0iIzAwMDAwMCIgY3g9IjMyMC4wOTk3IiBjeT0iLTIzNCIgcng9Ijk1LjAwNDMi
IHJ5PSIxOCIvPgo8dGV4dCB0ZXh0LWFuY2hvcj0ibWlkZGxlIiB4PSIzMjAuMDk5NyIgeT0iLTIy
OS44IiBmb250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiIGZpbGw9IiMw
MDAwMDAiPkNGX0VOSE1FVEFGSUxFPC90ZXh0Pgo8L2c+CjwhLS0gQ0ZfTUVUQUZJTEVQSUNUIC0t
Pgo8ZyBpZD0ibm9kZTYiIGNsYXNzPSJub2RlIj4KPHRpdGxlPkNGX01FVEFGSUxFUElDVDwvdGl0
bGU+CjxlbGxpcHNlIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgY3g9IjMyMC4wOTk3IiBj
eT0iLTE2MiIgcng9Ijk2LjE2NTIiIHJ5PSIxOCIvPgo8dGV4dCB0ZXh0LWFuY2hvcj0ibWlkZGxl
IiB4PSIzMjAuMDk5NyIgeT0iLTE1Ny44IiBmb250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQt
c2l6ZT0iMTQuMDAiIGZpbGw9IiMwMDAwMDAiPkNGX01FVEFGSUxFUElDVDwvdGV4dD4KPC9nPgo8
IS0tIENGX0VOSE1FVEFGSUxFJiM0NTsmZ3Q7Q0ZfTUVUQUZJTEVQSUNUIC0tPgo8ZyBpZD0iZWRn
ZTkiIGNsYXNzPSJlZGdlIj4KPHRpdGxlPkNGX0VOSE1FVEFGSUxFLSZndDtDRl9NRVRBRklMRVBJ
Q1Q8L3RpdGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9IiMwMDAwMDAiIGQ9Ik0zMTQuMTQ3
MywtMjE1LjgzMTRDMzEzLjM5NjksLTIwOC4xMzEgMzEzLjE3NiwtMTk4Ljk3NDMgMzEzLjQ4NDYs
LTE5MC40MTY2Ii8+Cjxwb2x5Z29uIGZpbGw9IiMwMDAwMDAiIHN0cm9rZT0iIzAwMDAwMCIgcG9p
bnRzPSIzMTYuOTc4OSwtMTkwLjYxNjEgMzE0LjEyMzcsLTE4MC40MTMzIDMwOS45OTMxLC0xOTAu
MTY5NyAzMTYuOTc4OSwtMTkwLjYxNjEiLz4KPC9nPgo8IS0tIENGX01FVEFGSUxFUElDVCYjNDU7
Jmd0O0NGX0VOSE1FVEFGSUxFIC0tPgo8ZyBpZD0iZWRnZTEwIiBjbGFzcz0iZWRnZSI+Cjx0aXRs
ZT5DRl9NRVRBRklMRVBJQ1QtJmd0O0NGX0VOSE1FVEFGSUxFPC90aXRsZT4KPHBhdGggZmlsbD0i
bm9uZSIgc3Ryb2tlPSIjMDAwMDAwIiBkPSJNMzI2LjA3NTcsLTE4MC40MTMzQzMyNi44MDY4LC0x
ODguMDU5MyAzMjcuMDIsLTE5Ny4xMDg0IDMyNi43MTUyLC0yMDUuNTcyNiIvPgo8cG9seWdvbiBm
aWxsPSIjMDAwMDAwIiBzdHJva2U9IiMwMDAwMDAiIHBvaW50cz0iMzIzLjIwNDUsLTIwNS42MjY0
IDMyNi4wNTIxLC0yMTUuODMxNCAzMzAuMTg5OSwtMjA2LjA3OCAzMjMuMjA0NSwtMjA1LjYyNjQi
Lz4KPC9nPgo8IS0tIENGX09FTVRFWFQgLS0+CjxnIGlkPSJub2RlNyIgY2xhc3M9Im5vZGUiPgo8
dGl0bGU+Q0ZfT0VNVEVYVDwvdGl0bGU+CjxlbGxpcHNlIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAw
MDAwMCIgY3g9IjUwNy4wOTk3IiBjeT0iLTIzNCIgcng9IjczLjU5NjUiIHJ5PSIxOCIvPgo8dGV4
dCB0ZXh0LWFuY2hvcj0ibWlkZGxlIiB4PSI1MDcuMDk5NyIgeT0iLTIyOS44IiBmb250LWZhbWls
eT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiIGZpbGw9IiMwMDAwMDAiPkNGX09FTVRF
WFQ8L3RleHQ+CjwvZz4KPCEtLSBDRl9URVhUIC0tPgo8ZyBpZD0ibm9kZTgiIGNsYXNzPSJub2Rl
Ij4KPHRpdGxlPkNGX1RFWFQ8L3RpdGxlPgo8ZWxsaXBzZSBmaWxsPSJub25lIiBzdHJva2U9IiMw
MDAwMDAiIGN4PSI0OTcuMDk5NyIgY3k9Ii0xNjIiIHJ4PSI1Mi4xODY3IiByeT0iMTgiLz4KPHRl
eHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iNDk3LjA5OTciIHk9Ii0xNTcuOCIgZm9udC1mYW1p
bHk9IlRpbWVzLHNlcmlmIiBmb250LXNpemU9IjE0LjAwIiBmaWxsPSIjMDAwMDAwIj5DRl9URVhU
PC90ZXh0Pgo8L2c+CjwhLS0gQ0ZfT0VNVEVYVCYjNDU7Jmd0O0NGX1RFWFQgLS0+CjxnIGlkPSJl
ZGdlMTEiIGNsYXNzPSJlZGdlIj4KPHRpdGxlPkNGX09FTVRFWFQtJmd0O0NGX1RFWFQ8L3RpdGxl
Pgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9IiMwMDAwMDAiIGQ9Ik00OTguNjIzOSwtMjE1Ljgz
MTRDNDk2LjgwMzksLTIwOC4xMzEgNDk1LjMxMTMsLTE5OC45NzQzIDQ5NC40MzEzLC0xOTAuNDE2
NiIvPgo8cG9seWdvbiBmaWxsPSIjMDAwMDAwIiBzdHJva2U9IiMwMDAwMDAiIHBvaW50cz0iNDk3
LjkxOTMsLTE5MC4xMjM1IDQ5My42ODExLC0xODAuNDEzMyA0OTAuOTM4OSwtMTkwLjY0NzEgNDk3
LjkxOTMsLTE5MC4xMjM1Ii8+CjwvZz4KPCEtLSBDRl9VTklDT0RFVEVYVCAtLT4KPGcgaWQ9Im5v
ZGU5IiBjbGFzcz0ibm9kZSI+Cjx0aXRsZT5DRl9VTklDT0RFVEVYVDwvdGl0bGU+CjxlbGxpcHNl
IGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgY3g9IjU0MS4wOTk3IiBjeT0iLTkwIiByeD0i
OTUuNTY2NCIgcnk9IjE4Ii8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9IjU0MS4wOTk3
IiB5PSItODUuOCIgZm9udC1mYW1pbHk9IlRpbWVzLHNlcmlmIiBmb250LXNpemU9IjE0LjAwIiBm
aWxsPSIjMDAwMDAwIj5DRl9VTklDT0RFVEVYVDwvdGV4dD4KPC9nPgo8IS0tIENGX09FTVRFWFQm
IzQ1OyZndDtDRl9VTklDT0RFVEVYVCAtLT4KPGcgaWQ9ImVkZ2UxMiIgY2xhc3M9ImVkZ2UiPgo8
dGl0bGU+Q0ZfT0VNVEVYVC0mZ3Q7Q0ZfVU5JQ09ERVRFWFQ8L3RpdGxlPgo8cGF0aCBmaWxsPSJu
b25lIiBzdHJva2U9IiMwMDAwMDAiIGQ9Ik01MjIuNTYyNSwtMjE2LjE2OUM1MzIuMjAzMiwtMjA2
LjcxNzUgNTQzLjQ3OCwtMTk0LjEzOTggNTQ5LjA5OTcsLTE4MCA1NTcuMDQzMiwtMTYwLjAyMDMg
NTUxLjg1MjgsLTEzNi4wMzg1IDU0Ni41MTI5LC0xMTcuODU2MiIvPgo8cG9seWdvbiBmaWxsPSIj
MDAwMDAwIiBzdHJva2U9IiMwMDAwMDAiIHBvaW50cz0iNTQ5LjgxNDgsLTExNi42ODU2IDU0My41
MzE3LC0xMDguMTU0OSA1NDMuMTIzNiwtMTE4Ljc0MTkgNTQ5LjgxNDgsLTExNi42ODU2Ii8+Cjwv
Zz4KPCEtLSBDRl9URVhUJiM0NTsmZ3Q7Q0ZfT0VNVEVYVCAtLT4KPGcgaWQ9ImVkZ2UxMyIgY2xh
c3M9ImVkZ2UiPgo8dGl0bGU+Q0ZfVEVYVC0mZ3Q7Q0ZfT0VNVEVYVDwvdGl0bGU+CjxwYXRoIGZp
bGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgZD0iTTUwNS41MTQ5LC0xNzkuOTEzNEM1MDcuMzcw
MiwtMTg3LjY5OTMgNTA4Ljg5MTMsLTE5Ny4wMSA1MDkuNzc5NCwtMjA1LjY5NDEiLz4KPHBvbHln
b24gZmlsbD0iIzAwMDAwMCIgc3Ryb2tlPSIjMDAwMDAwIiBwb2ludHM9IjUwNi4zMDA5LC0yMDYu
MTE2NiA1MTAuNTI4NiwtMjE1LjgzMTQgNTEzLjI4MTksLTIwNS42MDA1IDUwNi4zMDA5LC0yMDYu
MTE2NiIvPgo8L2c+CjwhLS0gQ0ZfVEVYVCYjNDU7Jmd0O0NGX1VOSUNPREVURVhUIC0tPgo8ZyBp
ZD0iZWRnZTE0IiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT5DRl9URVhULSZndDtDRl9VTklDT0RFVEVY
VDwvdGl0bGU+CjxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgZD0iTTUwMi4yNTAz
LC0xNDMuODMxNEM1MDYuNTMxNCwtMTM1LjQ5NyA1MTIuNDc1MiwtMTI1LjQ1NjcgNTE4LjQ4OTUs
LTExNi4zMTYyIi8+Cjxwb2x5Z29uIGZpbGw9IiMwMDAwMDAiIHN0cm9rZT0iIzAwMDAwMCIgcG9p
bnRzPSI1MjEuNDc4MiwtMTE4LjE0NTkgNTI0LjIyNTMsLTEwNy45MTM0IDUxNS42OTY3LC0xMTQu
MTk5NCA1MjEuNDc4MiwtMTE4LjE0NTkiLz4KPC9nPgo8IS0tIENGX1VOSUNPREVURVhUJiM0NTsm
Z3Q7Q0ZfT0VNVEVYVCAtLT4KPGcgaWQ9ImVkZ2UxNSIgY2xhc3M9ImVkZ2UiPgo8dGl0bGU+Q0Zf
VU5JQ09ERVRFWFQtJmd0O0NGX09FTVRFWFQ8L3RpdGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJv
a2U9IiMwMDAwMDAiIGQ9Ik01NTYuODYxNCwtMTA3LjgwOTdDNTY3LjI4MTEsLTEyNi4zODAyIDU3
Ni42MTY3LC0xNTYuMDYyNCA1NjcuMDk5NywtMTgwIDU2Mi41MjE2LC0xOTEuNTE0OCA1NTQuMTk0
NiwtMjAxLjk5MzcgNTQ1LjEwMjEsLTIxMC41OTE5Ii8+Cjxwb2x5Z29uIGZpbGw9IiMwMDAwMDAi
IHN0cm9rZT0iIzAwMDAwMCIgcG9pbnRzPSI1NDIuNTg1NCwtMjA4LjE0MjYgNTM3LjM0OTgsLTIx
Ny4zNTM1IDU0Ny4xODY2LC0yMTMuNDE4IDU0Mi41ODU0LC0yMDguMTQyNiIvPgo8L2c+CjwhLS0g
Q0ZfVU5JQ09ERVRFWFQmIzQ1OyZndDtDRl9URVhUIC0tPgo8ZyBpZD0iZWRnZTE2IiBjbGFzcz0i
ZWRnZSI+Cjx0aXRsZT5DRl9VTklDT0RFVEVYVC0mZ3Q7Q0ZfVEVYVDwvdGl0bGU+CjxwYXRoIGZp
bGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgZD0iTTUzNi4wMjUsLTEwOC4wMjA2QzUzMS42ODE1
LC0xMTYuNDk1MSA1MjUuNjAwNywtMTI2Ljc1NzkgNTE5LjQ2ODcsLTEzNi4wNDk3Ii8+Cjxwb2x5
Z29uIGZpbGw9IiMwMDAwMDAiIHN0cm9rZT0iIzAwMDAwMCIgcG9pbnRzPSI1MTYuMzk1MSwtMTM0
LjM0MzQgNTEzLjYyOTEsLTE0NC41NzA4IDUyMi4xNjkzLC0xMzguMzAwNiA1MTYuMzk1MSwtMTM0
LjM0MzQiLz4KPC9nPgo8L2c+Cjwvc3ZnPg==" /></div>
 */

/*
Image generated using graphviz:

digraph G {
CF_BITMAP -> CF_DIB;
CF_BITMAP -> CF_DIBV5;
CF_DIB -> CF_BITMAP;
CF_DIB -> CF_PALETTE;
CF_DIB -> CF_DIBV5;
CF_DIBV5 -> CF_BITMAP;
CF_DIBV5 -> CF_DIB;
CF_DIBV5 -> CF_PALETTE;
CF_ENHMETAFILE -> CF_METAFILEPICT;
CF_METAFILEPICT -> CF_ENHMETAFILE;
CF_OEMTEXT -> CF_TEXT;
CF_OEMTEXT -> CF_UNICODETEXT;
CF_TEXT -> CF_OEMTEXT;
CF_TEXT -> CF_UNICODETEXT;
CF_UNICODETEXT -> CF_OEMTEXT;
CF_UNICODETEXT -> CF_TEXT;
}
*/


use std::{ffi::{OsStr, OsString}, fmt::Debug, os::windows::prelude::{OsStrExt, OsStringExt}};

use windows::Win32::{Foundation::PWSTR, System::{DataExchange::{GetClipboardFormatNameW, RegisterClipboardFormatW}, SystemServices::{CF_PRIVATEFIRST, CF_PRIVATELAST, CF_GDIOBJFIRST, CF_GDIOBJLAST}}};
/// Clipboard format wrapper type from the `windows` crate.
pub use windows::Win32::System::SystemServices::CLIPBOARD_FORMATS;
pub use windows::Win32::System::SystemServices::{
    CF_BITMAP,
    CF_DIB,
    CF_DIBV5,
    CF_DIF,
    CF_DSPBITMAP,
    CF_DSPENHMETAFILE,
    CF_DSPMETAFILEPICT,
    CF_DSPTEXT,
    CF_ENHMETAFILE,
    CF_HDROP,
    CF_LOCALE,
    CF_METAFILEPICT,
    CF_OEMTEXT,
    CF_OWNERDISPLAY,
    CF_PALETTE,
    CF_PENDATA,
    CF_RIFF,
    CF_SYLK,
    CF_TEXT,
    CF_TIFF,
    CF_UNICODETEXT,
    CF_WAVE,
};

/// Ensures that the given clipboard format code is a valid private format,
/// and returns it.
///
/// See also: <https://docs.microsoft.com/en-us/windows/win32/dataxchg/clipboard-formats#private-clipboard-formats>
pub const fn private(format: u32) -> CLIPBOARD_FORMATS {
    assert!(format >= CF_PRIVATEFIRST.0 && format <= CF_PRIVATELAST.0);
    CLIPBOARD_FORMATS(format)
}

/// Ensures that the given clipboard format code is a valid GDI object
/// clipboard format, and returns it.
///
/// See also: <https://docs.microsoft.com/en-us/windows/win32/dataxchg/clipboard-formats#private-clipboard-formats>
pub const fn gdi(format: u32) -> CLIPBOARD_FORMATS {
    assert!(format >= CF_GDIOBJFIRST.0 && format <= CF_GDIOBJLAST.0);
    CLIPBOARD_FORMATS(format)
}

/// Look up a registered format using [RegisterClipboardFormatW](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclipboardformatw).
///
/// If a registered format with the specified name already exists, a new format is not registered and the return value identifies the existing format.
///
/// # Example
///
/// ```
/// use windows_clipboard_async::format;
/// let foo = format::registered("ExcludeClipboardContentFromMonitorProcessing"); // to disable syncing this clipboard item to history and other devices
/// let bar = format::registered("HTML Format"); // for HTML-formatted text in UTF-8 encodign
/// ```
pub fn registered(name: &str) -> CLIPBOARD_FORMATS {
    let str = OsStr::new(name);
    let mut str: Vec<u16> = str.encode_wide().chain([0]).collect();
    unsafe {
        CLIPBOARD_FORMATS(RegisterClipboardFormatW(PWSTR(str.as_mut_ptr())))
    }
}

/// Better Debug implementation for `[CLIPBOARD_FORMATS]`.
pub struct DebugFormats<'a>(pub &'a [CLIPBOARD_FORMATS]);
impl<'a> Debug for DebugFormats<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug = f.debug_list();
        for &o in self.0 {
            let dbg = DebugFormat::from(o);
            debug.entry(&dbg);
        }
        debug.finish()
    }
}

/// Better Debug implementation for `CLIPBOARD_FORMATS`.
#[derive(Debug)]
pub enum DebugFormat {
    #[doc(hidden)]
    CF(&'static str),
    #[doc(hidden)]
    Registered(String),
    #[doc(hidden)]
    Private(CLIPBOARD_FORMATS),
}
impl From<CLIPBOARD_FORMATS> for DebugFormat {
    fn from(o: CLIPBOARD_FORMATS) -> DebugFormat {
        match o {
            CF_BITMAP => DebugFormat::CF("CF_BITMAP"),
            CF_DIB => DebugFormat::CF("CF_DIB"),
            CF_DIBV5 => DebugFormat::CF("CF_DIBV5"),
            CF_DIF => DebugFormat::CF("CF_DIF"),
            CF_DSPBITMAP => DebugFormat::CF("CF_DSPBITMAP"),
            CF_DSPENHMETAFILE => DebugFormat::CF("CF_DSPENHMETAFILE"),
            CF_DSPMETAFILEPICT => DebugFormat::CF("CF_DSPMETAFILEPICT"),
            CF_DSPTEXT => DebugFormat::CF("CF_DSPTEXT"),
            CF_ENHMETAFILE => DebugFormat::CF("CF_ENHMETAFILE"),
            CF_HDROP => DebugFormat::CF("CF_HDROP"),
            CF_LOCALE => DebugFormat::CF("CF_LOCALE"),
            CF_METAFILEPICT => DebugFormat::CF("CF_METAFILEPICT"),
            CF_OEMTEXT => DebugFormat::CF("CF_OEMTEXT"),
            CF_OWNERDISPLAY => DebugFormat::CF("CF_OWNERDISPLAY"),
            CF_PALETTE => DebugFormat::CF("CF_PALETTE"),
            CF_PENDATA => DebugFormat::CF("CF_PENDATA"),
            CF_RIFF => DebugFormat::CF("CF_RIFF"),
            CF_SYLK => DebugFormat::CF("CF_SYLK"),
            CF_TEXT => DebugFormat::CF("CF_TEXT"),
            CF_TIFF => DebugFormat::CF("CF_TIFF"),
            CF_UNICODETEXT => DebugFormat::CF("CF_UNICODETEXT"),
            CF_WAVE => DebugFormat::CF("CF_WAVE"),
            custom => {
                unsafe {
                    let mut buf = [0u16; 128];
                    let len = GetClipboardFormatNameW(custom.0, PWSTR(&mut buf[0]), 128);
                    if len == 0 {
                        DebugFormat::Private(custom)
                    } else {
                        DebugFormat::Registered(OsString::from_wide(&buf[..len as usize]).to_string_lossy().into_owned())
                    }
                }
            }
        }
    }
}
